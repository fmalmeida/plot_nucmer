#!/bin/bash

############
### Help ###
############
Help()
{
cat << EOF
Simple script to run a whole genome alignment between two FASTAs with nucmer
and create a circular visualization of the results.

Copyright, Felipe Almeida <almeidafmarques@outlook.com>, 2021

# Comments
The subject will be draw in the outer most layer and the query will be draw in
the inner layer, as it is showing an alignment of the query against the subject.

 Syntax:
  plot_nucmer [OPTIONS]

 Options:

  ## Required

  --subject <fasta>                                     Path to FASTA file to be used as subject in alignment.

  --sprefix <string>                                    Prefix (name) to be used for subject FASTA. If prefix has
                                                        a space it must be double quoted.

  --query <fasta>                                       Path to FASTA file to be used as query in alignment.

  --qprefix <string>                                    Prefix (name) to be used for query FASTA. If prefix has
                                                        a space it must be double quoted.

  ## Optional

  --out <string>                                        Prefix for nucmer plot outputs.
                                                        Default: plot_nucmer_\${QUERY_PREFIX}_vs_\${SUBJECT_PREFIX}

  --scolor <string>                                     R color for subject contigs. Default: gray70.

  --qcolor <string>                                     R color for query contigs. Default: steelblue.

  --minlen <int>                                        Min. alignment length to be considered for plot. Default: 1000.

  --minid <int>                                         Min. alignment identity to be considered for plot. Default: 90.

EOF
}

################
### Defaults ###
################
export SUBJECT_FASTA=""
export SUBJECT_PREFIX=""
export SCOLOR="gray70"
export QUERY_FASTA=""
export QUERY_PREFIX=""
export QCOLOR="steelblue"
export OUTNAME=""
export MINLEN=1000
export MINID=90

################################
### Get positional arguments ###
################################
# No arguments given
if [ $# -eq 0 ] ; then
    Help
    exit 0
fi

# arguments given
POSITIONAL=()
while [[ $# -gt 0 ]]
do
ARGS="$1"
case $ARGS in
    -h|--help)
      Help
      exit
      ;;
    --subject)
      if [[ -f "$2" ]]; then
          export SUBJECT_FASTA=$2
          shift 2
      else
          echo -e '\nERROR: "--subject" requires an argument\n'
          exit
      fi
      ;;
    --sprefix)
      if [ "$2" ]; then
          export SUBJECT_PREFIX=$2
          shift 2
      else
          echo -e '\nERROR: "--sprefix" requires an argument\n'
          exit
      fi
      ;;
    --scolor)
      if [ "$2" ]; then
          export SCOLOR=$2
          shift 2
      else
          echo -e '\nERROR: "--scolor" requires an argument\n'
          exit
      fi
      ;;
    --query)
      if [[ -f "$2" ]]; then
          export QUERY_FASTA=$2
          shift 2
      else
          echo -e '\nERROR: "--query" requires an argument\n'
          exit
      fi
      ;;
    --qprefix)
      if [ "$2" ]; then
          export QUERY_PREFIX=$2
          shift 2
      else
          echo -e '\nERROR: "--qprefix" requires an argument\n'
          exit
      fi
      ;;
    --qcolor)
      if [ "$2" ]; then
          export QCOLOR=$2
          shift 2
      else
          echo -e '\nERROR: "--qcolor" requires an argument\n'
          exit
      fi
      ;;
    --out)
      if [ "$2" ]; then
          export OUTNAME=$2
          shift 2
      else
          echo -e '\nERROR: "--out" requires an argument\n'
          exit
      fi
      ;;
    --minlen)
      if [ "$2" ]; then
          export MINLEN=$2
          shift 2
      else
          echo -e '\nERROR: "--minlen" requires a numeric argument\n'
          exit
      fi
      ;;
    --minid)
      if [ "$2" ]; then
          export MINID=$2
          shift 2
      else
          echo -e '\nERROR: "--minid" requires an argument\n'
          exit
      fi
      ;;
    *)
      printf "******************************\n"
      printf "Error: Invalid argument $1\n"
      printf "******************************\n"
      exit 1
esac
done

###################
### Main script ###
###################
if [ "$OUTNAME" == "" ]; then
    export OUTNAME="plot_nucmer_${QUERY_PREFIX}_vs_${SUBJECT_PREFIX}"
fi

# start
echo
echo "# Starting script!"
echo

## Produce fasta index
echo
echo "# Producing subject indexes!"
echo
samtools faidx $SUBJECT_FASTA
export index="${SUBJECT_FASTA}.fai"

## Run nucmer
echo
echo "# Running nucmer!"
echo
nucmer --mum $SUBJECT_FASTA $QUERY_FASTA -p QUERY_vs_SUBJECT.nucmer

## Filter alns
echo
echo "# Filtering alignments by length!"
echo
delta-filter -l $MINLEN -q QUERY_vs_SUBJECT.nucmer.delta > QUERY_vs_SUBJECT.nucmer.filtered.delta

# Produce coords file
echo
echo "# Producing parsed coords file!"
echo
show-coords -c -l -L $MINLEN -r -T QUERY_vs_SUBJECT.nucmer.filtered.delta > QUERY_vs_SUBJECT.nucmer.filtered_coords.txt

# Plot alignment
echo
echo "# Ploting alignments!"
echo
SCRIPT=$(which plot_nucmer.R)
cp $SCRIPT .
Rscript plot_nucmer.R --index "$index" --sname "$SUBJECT_PREFIX" --qname "$QUERY_PREFIX" --coords "QUERY_vs_SUBJECT.nucmer.filtered_coords.txt" --out "$OUTNAME" --pident "$MINID" --scolor "$SCOLOR" --qcolor "$QCOLOR"

# Bye
echo
echo "# Finished!"
echo "  The command executed is in the file render.sh!"
echo Rscript plot_nucmer.R --index "$index" --sname \"${SUBJECT_PREFIX}\" --qname \"${QUERY_PREFIX}\" --coords "QUERY_vs_SUBJECT.nucmer.filtered_coords.txt" --out \"${OUTNAME}\" --pident "$MINID" --scolor "$SCOLOR" --qcolor "$QCOLOR" > render.sh
echo "  The file plot_nucmer.R is available in the working directory for further customisation."
